import*as THREE from"three";import proj4 from"proj4";export default class ThreeDigitalObjects{constructor(e,t){this._json_geom=this._createGeometryArray(e),this._options=t,this._objects=new THREE.Group,this._drawObjects()}_drawObjects(){let e=[];for(let t=0;t<this._json_geom.length;t++)if("Point"==this._json_geom[t].type)e.push(this._convertToPlaneCoords(this._json_geom[t].coordinates)),this._drawParticle(e,this._options),e=[];else if("MultiPoint"==this._json_geom[t].type)for(let i=0;i<this._json_geom[t].coordinates.length;i++)e.push(this._convertToPlaneCoords(this._json_geom[t].coordinates[i])),this._drawParticle(e,this._options),e=[];else if("LineString"==this._json_geom[t].type)for(let i=0;i<this._json_geom[t].coordinates.length;i++){for(let o=0;o<this._json_geom[t].coordinates[i].length;o++)e.push(this._convertToPlaneCoords(this._json_geom[t].coordinates[i][o]));this._drawLine(e,this._options),e=[]}else if("Polygon"==this._json_geom[t].type)for(let i=0;i<this._json_geom[t].coordinates.length;i++){for(let o=0;o<this._json_geom[t].coordinates[i].length;o++)e.push(this._convertToPlaneCoords(this._json_geom[t].coordinates[i][o]));this._drawPolygon(e,this._options),e=[]}else if("MultiLineString"==this._json_geom[t].type)for(let i=0;i<this._json_geom[t].coordinates.length;i++)for(let o=0;o<this._json_geom[t].coordinates[i].length;o++){for(let s=0;s<this._json_geom[t].coordinates[i][o].length;s++)e.push(this._convertToPlaneCoords(this._json_geom[t].coordinates[i][o][s]));this._drawLine(e,this._options),e=[]}else{if("MultiPolygon"!=this._json_geom[t].type)throw e=[],new Error("The geoJSON is not valid.");for(let i=0;i<this._json_geom[t].coordinates.length;i++)for(let o=0;o<this._json_geom[t].coordinates[i].length;o++){for(let s=0;s<this._json_geom[t].coordinates[i][o].length;s++)e.push(this._convertToPlaneCoords(this._json_geom[t].coordinates[i][o][s]));this._drawPolygon(e,this._options),e=[]}}}_createGeometryArray(e){let t=[];if("Feature"==e.type)t.push(e.geometry);else if("FeatureCollection"==e.type)for(let i=0;i<e.features.length;i++)t.push(e.features[i].geometry);else{if("GeometryCollection"!=e.type)throw new Error("The geoJSON is not valid.");for(let i=0;i<e.geometries.length;i++)t.push(e.geometries[i])}return t}_convertCoordinatesToWorld(e,t){return proj4("EPSG:3785",[e,t])}_convertToPlaneCoords(e){let t=e[0],i=e[1],o=this._convertCoordinatesToWorld(t,i);return new THREE.Vector3(o[0],0,o[1])}_drawParticle(e){let t=new THREE.Geometry;t.vertices.push(e[0]);let i=new THREE.PointsMaterial(this._options.material),o=new THREE.Points(t,i);this.addMeshInObjects(o)}_drawLine(e){let t=new THREE.Geometry,i=new THREE.LineBasicMaterial(this._options.material);t.vertices=e,t.rotateX(Math.PI);let o=new THREE.Line(t,i);this.addMeshInObjects(o)}_drawPolygon(e){let t=new THREE.MeshPhongMaterial(this._options.material);var i=this._createShape(e),o=this._options.extrudeSettings?new THREE.ExtrudeBufferGeometry(i,this._options.extrudeSettings):new THREE.ShapeBufferGeometry(i);o.rotateX(-Math.PI/2);let s=new THREE.Mesh(o,t);this.addMeshInObjects(s)}_createShape(e){let t=[];for(var i=0;i<e.length;i++)t.push(new THREE.Vector2(e[i].x,e[i].z));return new THREE.Shape(t)}addMeshInObjects(e){this._objects.add(e)}addTo(e){e.add(this._objects)}};import*as THREE from"three";import{MapControls}from"three/examples/jsm/controls/OrbitControls.js";import{Sky}from"three/examples/jsm/objects/Sky.js";import ThreeDigitalObjects from"@/ThreeDigitalObjects";import axios from"axios";import proj4 from"proj4";var mergeJSON=require("merge-json");const WORLD_WIDTH=40052752.78,WORLD_HEIGHT=40097932.2,defaults={helpers:!0,world:{center:{latitude:0,longitude:0},zoom:1e3},camera:{fov:60,near:1e-8,far:1e9}};class ThreeDigitalTwin{constructor(e,t){this.mapid=e,this.options=mergeJSON.merge(defaults,t),this.camera=null,this.scene=null,this.renderer=null,this.controls=null,this.container=null,this._init(),this._animate(),console.log(proj4("EPSG:3785"))}_convertCoordinatesToWorld(e,t){return proj4("EPSG:3785",[e,-t])}_init(){this._initScene(),this._initRenderer(),this._initCamera(),this._initEnvironment(),this.options.helpers&&this._initHelpers(),this._initControls(),window.addEventListener("resize",this._onWindowResize.bind(this),!1)}_initScene(){this.scene=new THREE.Scene}_initRenderer(){this.container=document.getElementById(this.mapid),this.renderer=new THREE.WebGLRenderer({antialias:!0}),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(this.container.clientWidth,this.container.clientHeight),this.container.appendChild(this.renderer.domElement)}_initCamera(){this.camera=new THREE.PerspectiveCamera(this.options.camera.fov,window.innerWidth/window.innerHeight,this.options.camera.near,this.options.camera.far)}_initControls(){this.controls=new MapControls(this.camera,this.renderer.domElement),this.controls.enableDamping=!0,this.controls.screenSpacePanning=!0,this.controls.zoomSpeed=10,this.controls.maxPolarAngle=Math.PI/2,this.controls.maxDistance=WORLD_HEIGHT,window.controls=this.controls;let e=this._convertCoordinatesToWorld(this.options.world.center.longitude,this.options.world.center.latitude);this.controls.target=new THREE.Vector3(e[0],0,e[1]),this.camera.position.set(e[0],this.options.world.zoom,e[1]),this.camera.lookAt(this.controls.target),this.controls.update()}_initEnvironment(){this._initLights(),this._initSkyBox(),this._initOcean()}_initOcean(){var e=new THREE.PlaneBufferGeometry(WORLD_WIDTH,WORLD_HEIGHT,32),t=new THREE.MeshBasicMaterial({color:4814767}),i=new THREE.Mesh(e,t);i.rotateX(-Math.PI/2),this.scene.add(i)}_initSkyBox(){this.sky=new Sky,this.sky.scale.setScalar(WORLD_HEIGHT),this.scene.add(this.sky),this.sunSphere=new THREE.Mesh(new THREE.SphereBufferGeometry(2e4,16,8),new THREE.MeshBasicMaterial({color:16777215})),this.sunSphere.visible=!1,this.scene.add(this.sunSphere);var e=10,t=2,i=.005,o=.8,s=1,n=.49,r=.25,a=!0,h=this.sky.material.uniforms;h.turbidity.value=e,h.rayleigh.value=t,h.mieCoefficient.value=i,h.mieDirectionalG.value=o,h.luminance.value=s;var l=Math.PI*(n-.5),c=2*Math.PI*(r-.5);this.sunSphere.position.z=40*Math.cos(c),this.sunSphere.position.y=40*Math.sin(c)*Math.sin(l),this.sunSphere.position.x=40*Math.sin(c)*Math.cos(l),this.sunSphere.visible=a,h.sunPosition.value.copy(this.sunSphere.position)}_initLights(){let e=new THREE.AmbientLight(16777215,.2);this.scene.add(e)}_initHelpers(){var e=new THREE.AxesHelper(WORLD_HEIGHT);this.scene.add(e)}_animate(){requestAnimationFrame(this._animate.bind(this)),this.controls&&(this.controls.update(),this.camera.lookAt(this.controls.target)),this._render()}_render(){this.renderer.render(this.scene,this.camera)}_onWindowResize(){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)}getThreeOptions(e){var t={material:{}};return t.material.color=e.color,t.material.shadowSide=THREE.FrontSide,t.material.side=THREE.FrontSide,t.extrudeSettings={steps:2,depth:16,bevelEnabled:!1},t}async loadDataset(e,t){return new Promise((i,o)=>{axios.get(e).then(e=>{let o=new ThreeDigitalObjects(e.data,this.getThreeOptions(t));i(o.addTo(this.scene))}).catch(function(e){o(e)})})}async loadDatasets(e){return new Promise((t,i)=>{axios.get(e).then(async e=>{e.data.datasets.forEach(async e=>{await this.loadDataset(e.path,e.options)}),t()}).catch(function(e){i(e)})})}}export default ThreeDigitalTwin;